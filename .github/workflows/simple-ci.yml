name: Simple CI for SentimentSense

# 触发条件：推送到 main 分支或创建 Pull Request
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # 作业1：代码质量检查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pytest
        # 安装项目依赖（如果存在）
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: 🔍 Lint with flake8
      run: |
        echo "🔍 Running flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🎨 Check code formatting
      run: |
        echo "🎨 Checking code formatting with black..."
        black --check --diff . || echo "Code formatting issues found"

    - name: 🧪 Run tests
      run: |
        echo "🧪 Running tests..."
        if [ -d "tests" ]; then
          pytest tests/ -v
        else
          echo "No tests directory found, skipping tests"
        fi

  # 作业2：Docker 构建测试
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🐳 Build Docker image
      run: |
        echo "🐳 Building Docker image..."
        docker build -t sentiment-sense:test .
        echo "✅ Docker build successful!"

    - name: 🔍 Test Docker image
      run: |
        echo "🔍 Testing Docker image..."
        # 启动容器并测试
        docker run -d --name test-container -p 8000:8000 sentiment-sense:test
        sleep 10
        
        # 简单的健康检查
        if curl -f http://localhost:8000/health/simple; then
          echo "✅ Container health check passed!"
        else
          echo "❌ Container health check failed!"
          docker logs test-container
          exit 1
        fi
        
        # 清理
        docker stop test-container
        docker rm test-container

  # 作业3：安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🔒 Run security scan
      run: |
        echo "🔒 Running basic security checks..."
        
        # 检查是否有敏感文件
        if find . -name "*.key" -o -name "*.pem" -o -name "*.p12" | grep -q .; then
          echo "❌ Found potential sensitive files!"
          find . -name "*.key" -o -name "*.pem" -o -name "*.p12"
          exit 1
        else
          echo "✅ No sensitive files found"
        fi
        
        # 检查 requirements.txt 中的已知漏洞（如果存在）
        if [ -f requirements.txt ]; then
          echo "📦 Checking Python dependencies..."
          pip install safety
          safety check -r requirements.txt || echo "⚠️ Some security issues found in dependencies"
        fi

  # 作业4：通知（仅在主分支）
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [code-quality, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🎉 Success notification
      run: |
        echo "🎉 All checks passed!"
        echo "✅ Code quality: PASSED"
        echo "✅ Docker build: PASSED"
        echo "✅ Security scan: PASSED"
        echo ""
        echo "🚀 Ready for deployment!"
        echo "💡 To deploy manually, run: ./scripts/deploy-gke-complete.sh"
